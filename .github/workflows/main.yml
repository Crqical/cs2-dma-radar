name: Update Offsets

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  update-offsets:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Python dependencies
        run: pip install requests

      - name: Update Offsets
        id: update
        run: |
          python .github/scripts/update_offsets.py
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: steps.update.outputs.changed == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Setup Java
        if: steps.update.outputs.changed == 'true'
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "maven"

      - name: Build Client
        if: steps.update.outputs.changed == 'true'
        run: |
          cd client
          npm ci
          npm run build
          cd ..

      - name: Build Java App
        if: steps.update.outputs.changed == 'true'
        run: cd app && mvn package

      - name: Prepare Release Files
        if: steps.update.outputs.changed == 'true'
        run: |
          cp app/target/*.jar release/
          cd release && zip -r ../release.zip ./*

      - name: Update Version
        if: steps.update.outputs.changed == 'true'
        run: |
          if [ ! -f "app/pom.xml" ]; then
            echo "Error: pom.xml not found"
            exit 1
          fi
          # Extract current version
          CURRENT_VERSION=$(grep -m1 "<version>" app/pom.xml | sed 's/.*<version>\([^<]*\)<\/version>.*/\1/')
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Error: Could not extract version from pom.xml"
            exit 1
          fi

          # Increment patch version
          BASE_VERSION=$(echo $CURRENT_VERSION | rev | cut -d. -f2- | rev)
          PATCH_VERSION=$(echo $CURRENT_VERSION | rev | cut -d. -f1 | rev)
          NEW_VERSION="${BASE_VERSION}.$(($PATCH_VERSION + 1))"

          # Update pom.xml with new version
          sed -i "s/<version>$CURRENT_VERSION<\/version>/<version>$NEW_VERSION<\/version>/" app/pom.xml
          echo "version=$NEW_VERSION" >> $GITHUB_ENV
          echo "Updated version from $CURRENT_VERSION to $NEW_VERSION"

      - name: Commit changes
        if: steps.update.outputs.changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add release/offsets.json app/pom.xml
          git commit -m "chore: update offsets and bump version to v${version}"

      - name: Push changes
        if: steps.update.outputs.changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main

      - name: Create Release
        if: steps.update.outputs.changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: release.zip
          tag_name: v${{ env.version }}
          name: Release v${{ env.version }}
          body: "Automatic release with updated offsets"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
